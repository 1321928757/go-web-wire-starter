// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go-web-wire-starter/config"
	"go-web-wire-starter/internal/compo"
	"go-web-wire-starter/internal/dao"
	"go-web-wire-starter/internal/handler"
	"go-web-wire-starter/internal/mildware"
	"go-web-wire-starter/internal/service"
	"go-web-wire-starter/router"
	"go.uber.org/zap"
	"gopkg.in/natefinch/lumberjack.v2"
)

// Injectors from wire.go:

// wireApp init application.
func wireApp(configuration *config.Configuration, lumberjackLogger *lumberjack.Logger, zapLogger *zap.Logger) (*App, func(), error) {
	db := dao.NewDB(configuration, zapLogger)
	client := dao.NewRedis(configuration, zapLogger)
	sonyflake := compo.NewSonyFlake()
	data, cleanup, err := dao.NewData(zapLogger, db, client, sonyflake)
	if err != nil {
		return nil, nil, err
	}
	userDao := dao.NewUserDao(data, zapLogger)
	userService := service.NewUserService(zapLogger, userDao)
	jwtDao := dao.NewJwtDao(data, zapLogger)
	lockBuilder := compo.NewLockBuilder(client)
	jwtService := service.NewJwtService(zapLogger, configuration, userService, jwtDao, lockBuilder)
	userHandler := handler.NewUserHandler(zapLogger, userService, jwtService)
	cors := mildware.NewCorsM()
	jwtAuth := mildware.NewJWTAuthM(configuration, jwtService)
	recovery := mildware.NewRecoveryM(lumberjackLogger)
	engine := router.NewRouter(configuration, userHandler, cors, jwtAuth, recovery)
	server := newHttpServer(configuration, engine)
	app := newApp(configuration, zapLogger, server)
	return app, func() {
		cleanup()
	}, nil
}
